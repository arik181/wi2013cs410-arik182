/*
 * A game of snake.
 */

library snake;

import 'dart:collection';
import 'dart:html';
import 'dart:math' as math;

const int UP = 0;
const int DOWN = 1;
const int LEFT = 2;
const int RIGHT = 3;

class Location {
  int _x = 0;
  int _y = 0;
  
  Location(int x, int y) {
    this._x = x;
    this._y = y;
  }
  
  int get X => this._x;
  int get Y => this._y;
}

class Locatable {
  Location _location;
  ImageElement elem;
  num speed = 1;
  num spotsize = 25;
  bool collision = false;
  
  setImage(String img) {
    elem = new ImageElement(src: img);
  }
  
  left(root, Board board) {
    var nextX = (_location.X - 1);
    setLocation(root, board, nextX, _location.Y);
  }
  
  right(root, Board board) {
    var nextX = (_location.X + 1);
    setLocation(root, board, nextX, _location.Y);
  }
  
  up(root, Board board) {
    var nextY = (_location.Y - 1);
    setLocation(root, board, _location.X, nextY);
  }
  
  down(root, Board board) {
    var nextY = (_location.Y + 1);
    setLocation(root, board, _location.X, nextY);
  }
    
  initLocation(root, x, int y) {
    document.body.nodes.add(root);
    _location = new Location(x,y);
    elem.style.position = 'absolute';
    elem.style.left = '${x * spotsize}px';
    elem.style.top = '${y * spotsize}px';
    elem.style.visibility = 'hidden';
    root.nodes.add(elem);
  }
  
  setLocation(root, Board board, int x, int y) {
    _location._x = x;
    _location._y = y;
    elem.style.left = '${x * speed}px';
    elem.style.top = '${y * speed}px';
    _collisioncheck(root,board,x,y);
  }
  
  _collisioncheck(root, board, x, y) {
    if (x < 0 || 
        x > board.getWidth() ||
        y < 0 ||
        y > board.getHeight()) {
      collision = true;
    }
  }
  
  get getCollision => collision;
  
  display() {
    elem.style.visibility = 'visible';
  }
}

class Snake {
  Element root;
  final SegmentQueue _SegmentQueue = new SegmentQueue();
  Head _Head;
  bool collision = false;
  
  bool _hungry = true;
  int _direction = UP;
  
  Snake(root,Board board) {
    var random = new math.Random();
    int boardsize = board.getSize();
    int boardwidth = board.getWidth();
    int boardheight = board.getHeight();
    int x = random.nextInt(boardwidth);
    int y = random.nextInt(boardheight);
    _Head = new Head();
    _Head.initLocation(root,x,y);
    _direction = _Head.getInitialDirection(board);
  }
  
  goLeft() {
    _direction = LEFT;
  }
  
  goRight() {
    _direction = RIGHT;
  }
  
  goUp() {
    _direction = UP;
  }
  
  goDown() {
    _direction = DOWN;
  }
  
  setLocation(root, board, x,y) {
    _Head.setLocation(root, board, x, y);
  }
  
  tick(board) {
    _Head.tick(root, board, _direction);
    if (_Head.getCollision) {
      collision = true;
    }
  }  
  
  get getCollision => collision;

  display() {
    _Head.display();
  }
}

class SegmentQueue {
  var queue = new Queue<int>();
  SegmentQueue() {
    // TODO
  }
  tick() {
    // TODO
  }
  display() {
    // TODO
  }
}

class Segment extends Locatable {
  static const String snakestring = "images/snake.png";
  Segment() {
    setImage(snakestring);
  }
  tick() {
    // TODO
  }
  display() {
    // TODO
  }
}

class Head extends Locatable {
  static const String headstring = "images/head.png";
 
  Head() {
    setImage(headstring);
  } 
 
  getInitialDirection(board) => 
      (_location.Y > board.center) ? UP : DOWN;
  
  tick(root, board, int direction) {
    switch(direction) {
      case LEFT:
        left(root, board);
        break;
      case RIGHT:
        right(root, board);
        break;
      case UP:
        up(root, board);
        break;
      case DOWN:
        down(root, board);
        break;
      default:
        break;
    }
  }
}

class Apple extends Locatable {
  static const String applestring = "images/apple.png";

  Apple(Element root, int boardsize) {
    var random = new math.Random();
    int x = random.nextInt(boardsize); // the number of
    int y = random.nextInt(boardsize); // spots on the game board.
    setImage(applestring);
    initLocation(root, x, y);
  }
  
  remove() {
    // TODO
  }
  
  tick() {
    // TODO
  }
  
  display() {
    // TODO
  }
}

class AppleList {
  var list = new List<Apple>();
  AppleList() {
    // TODO
  }
  tick() {
    // TODO
  }
  display() {
    // TODO
  }
}

class Board {
  int _width;
  int _height;
  int _size;
  
  Board(Element root, this._width, this._height) {
    _size = _width * _height;
  }
  
  getSize() => this._size;
  getWidth() => this._width;
  getHeight() => this._height;
  num get center => (_height / 2).abs() - 1;
  setSize(width, height) {
    this._width = width;
    this._height = height;
  }
}

class Game {
  Board board;
  Snake snake;
  AppleList apples;
  DivElement root;
  DateTime prevtime;
  num boardwidth = 576;
  num boardheight = 576;
  var currentframe;
  bool go = false;
  
  Game() {
    root = query("#container");
    root.style.position = 'relative';
    root.style.marginRight = 'auto';
    root.style.marginLeft = 'auto';
    board = new Board(root, boardwidth,boardheight);
    snake = new Snake(root, board);
    apples = new AppleList();
  }

  start() {
    go = true;
    var t = query("#text");
    t.text = "";
    query("#text")
    ..onClick.listen((e) => "");
    prevtime = new DateTime.now();
    window.onKeyDown.listen(getKeys);
    window.onKeyUp.listen(getKeys);
    window.onKeyPress.listen(getKeys);
    window.requestAnimationFrame(tick);
  }

  stop() {
    window.cancelAnimationFrame(currentframe);
    go = false;
    query("#text")
    ..onClick.listen((e) => start());
  }
  
  reset() {
    // TODO
  }
  
  tick(e) {
    var currenttime = new DateTime.now();
    if ( currenttime.millisecond != prevtime.millisecond ) {
      prevtime = currenttime;
      snake.tick(board);
      if (snake.getCollision) {
        stop();
        reset();
      }
      apples.tick();
      snake.display();
      apples.display();
    }
    if (go)
      currentframe = window.requestAnimationFrame(tick);
  }
  
  getKeys(e)
  {
    switch(e.keyCode)
    {
      case KeyCode.DOWN:
      case KeyCode.S:
        snake.goDown();
        break;
      case KeyCode.LEFT:
      case KeyCode.A:
        snake.goLeft();
        break;
      case KeyCode.UP:
      case KeyCode.W:
        snake.goUp();
        break;
      case KeyCode.RIGHT:
      case KeyCode.D:
        snake.goRight();
        break;
      default:
        break;
    }
  }
}

class Page {
  Page() {
    query("#text")
    ..text = "Click to begin!";
  }
}

void main() {
  Page page = new Page();
  Game game = new Game();

  query("#text")
  ..onClick.listen((e) => game.start());
}


